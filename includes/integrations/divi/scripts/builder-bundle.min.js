/**
 * ConvertKit Form Divi Module.
 */
class ConvertKitDiviForm extends React.Component {

	/**
	 * The Divi module name. Must match the slug defined in
	 * the PHP class ConvertKit_Divi_Module_Form.
	 * 
	 * @since 	2.5.6
	 */
	static slug = 'convertkit_form';

	/**
	 * Renders the frontend output for this module.
	 * 
	 * @since 	2.5.6
	 */
	render() {

		return ConvertKitDiviRenderModule(
			window.ConvertkitDiviBuilderData.form,
			this.props.form,
			( this.props.form.length > 0 ? block.fields.form.data.forms[ this.props.form ].name : '' )
		);

	}

}

/**
 * ConvertKit Product Divi Module.
 */
class ConvertKitDiviProduct extends React.Component {

	/**
	 * The Divi module name. Must match the slug defined in
	 * the PHP class ConvertKit_Divi_Module_Product.
	 * 
	 * @since 	2.5.7
	 */
	static slug = 'convertkit_product';

	/**
	 * Renders the frontend output for this module.
	 * 
	 * @since 	2.5.7
	 */
	render() {

		// Get the Product block configuration.
		const block = window.ConvertkitDiviBuilderData.product;

		// If no Access Token has been defined in the Plugin, show a message in the module to tell the user what to do.
		if ( ! block.has_access_token ) {
			return React.createElement( 'div', {
				className: 'convertkit-divi-module convertkit-no-content'
			}, [
				React.createElement( 'p', {}, block.no_access_token.notice ),
				React.createElement( 'p', {}, block.no_access_token.instruction_text )
			]  );
		}

		// If no resources exist in ConvertKit, show a message in the module to tell the user what to do.
		if ( ! block.has_resources ) {
			return React.createElement( 'div', {
				className: 'convertkit-divi-module convertkit-no-content'
			}, [
				React.createElement( 'p', {}, block.no_resources.notice ),
				React.createElement( 'p', {}, block.no_resources.instruction_text )
			]  );
		}

		// Show instructions if no product selected.
		if ( this.props.product.length === 0 ) {
			// Return module with text.
			return React.createElement( 'div', {
				className: 'convertkit-divi-module'
			}, 'Select a Product using the Product option in this module.' );
		}

		// Get selected product.
		const product = block.fields.product.data.products[ this.props.product ];

		// Return module with text.
		return React.createElement( 'div', {
			className: 'convertkit-divi-module'
		}, 'ConvertKit Product "' + form.name + '" selected. View on the frontend site to see the product.' );

	}

}

function ConvertKitDiviRenderModule( block, value, resource ) {

	// If no Access Token has been defined in the Plugin, show a message in the module to tell the user what to do.
	if ( ! block.has_access_token ) {
		return React.createElement( 'div', {
			className: 'convertkit-divi-module convertkit-no-content'
		}, [
			React.createElement( 'p', {}, block.no_access_token.notice ),
			React.createElement( 'p', {}, block.no_access_token.instruction_text )
		]  );
	}

	// If no resources exist in ConvertKit, show a message in the module to tell the user what to do.
	if ( ! block.has_resources ) {
		return React.createElement( 'div', {
			className: 'convertkit-divi-module convertkit-no-content'
		}, [
			React.createElement( 'p', {}, block.no_resources.notice ),
			React.createElement( 'p', {}, block.no_resources.instruction_text )
		]  );
	}

	// Show instructions if no resource selected.
	if ( value.length === 0 ) {
		// Return module with text.
		return React.createElement( 'div', {
			className: 'convertkit-divi-module'
		}, 'Configure this module by clicking the settings cog.' );
	}

			// Get selected form.
		const form = block.fields.form.data.forms[ this.props.form ];

		// Return module with text.
		return React.createElement( 'div', {
			className: 'convertkit-divi-module'
		}, 'ConvertKit Form "' + form.name + '" selected. View on the frontend site to see the form.' );

	// Return module with text.
	// @TODO.
	return React.createElement( 'div', {
		className: 'convertkit-divi-module'
	}, 'ConvertKit Product "' + label + '" selected. View on the frontend site to see the product.' ); 

}


/**
 * Register Divi modules when the Divi Builder API is ready.
 * 
 * @since 	2.5.6
 * 
 * @param 	object 	event 	Event.
 * @param 	object 	API 	Divi Buidler API.
 */
jQuery( window ).on( 'et_builder_api_ready', function ( event, API ) {

	// Register Divi modules.
  	API.registerModules( [
  		ConvertKitDiviForm,
  		ConvertKitDiviProduct
  	] );

} );