/**
 * ConvertKit Broadcasts Divi Module.
 */
class ConvertKitDiviBroadcasts extends React.Component {

	/**
	 * The Divi module name. Must match the slug defined in
	 * the PHP class ConvertKit_Divi_Module_Broadcasts.
	 * 
	 * @since 	2.5.7
	 */
	static slug = 'convertkit_broadcasts';

	/**
	 * Renders the frontend output for this module.
	 * 
	 * @since 	2.5.7
	 */
	render() {

		// Fetch element if no access token or resources exist.
		const warning = ConvertKitDiviMaybeRenderWarning( window.ConvertkitDiviBuilderData.broadcasts );
		if ( warning !== true ) {
			return warning;
		}

		// Return module with text.
		return React.createElement( 'div', {
			className: 'convertkit-divi-module'
		}, 'Configure this broadcasts module by clicking the settings cog.' );

	}

}

/**
 * ConvertKit Form Divi Module.
 */
class ConvertKitDiviForm extends React.Component {

	/**
	 * The Divi module name. Must match the slug defined in
	 * the PHP class ConvertKit_Divi_Module_Form.
	 * 
	 * @since 	2.5.6
	 */
	static slug = 'convertkit_form';

	/**
	 * Renders the frontend output for this module.
	 * 
	 * @since 	2.5.6
	 */
	render() {

		const form = Number( typeof this.props.form !== 'undefined' ? this.props.form : 0 );

		return ConvertKitDiviRenderResourceModule(
			window.ConvertkitDiviBuilderData.form,
			form,
			( form > 0 ? window.ConvertkitDiviBuilderData.form.fields.form.data.forms[ form ].name : '' ),
			window.ConvertkitDiviBuilderData.form.fields.form.label
		);

	}

}

/**
 * ConvertKit Form Trigger Divi Module.
 */
class ConvertKitDiviFormTrigger extends React.Component {

	/**
	 * The Divi module name. Must match the slug defined in
	 * the PHP class ConvertKit_Divi_Module_Form.
	 * 
	 * @since 	2.5.7
	 */
	static slug = 'convertkit_formtrigger';

	/**
	 * Renders the frontend output for this module.
	 * 
	 * @since 	2.5.7
	 */
	render() {

		const form = Number( typeof this.props.form !== 'undefined' ? this.props.form : 0 );

		return ConvertKitDiviRenderResourceModule(
			window.ConvertkitDiviBuilderData.formtrigger,
			form,
			( form > 0 ? window.ConvertkitDiviBuilderData.formtrigger.fields.form.values[ form ] : '' ),
			window.ConvertkitDiviBuilderData.formtrigger.fields.form.label
		);

	}

}

/**
 * ConvertKit Product Divi Module.
 */
class ConvertKitDiviProduct extends React.Component {

	/**
	 * The Divi module name. Must match the slug defined in
	 * the PHP class ConvertKit_Divi_Module_Product.
	 * 
	 * @since 	2.5.7
	 */
	static slug = 'convertkit_product';

	/**
	 * Renders the frontend output for this module.
	 * 
	 * @since 	2.5.7
	 */
	render() {

		const product = Number( typeof this.props.product !== 'undefined' ? this.props.product : 0 );

		return ConvertKitDiviRenderResourceModule(
			window.ConvertkitDiviBuilderData.product,
			product,
			( product > 0 ? window.ConvertkitDiviBuilderData.product.fields.product.values[ product ] : '' ),
			window.ConvertkitDiviBuilderData.product.fields.product.label
		);

	}

}

/**
 * Renders the Divi module for the given ConvertKit block (form, product, broadcast etc).
 * and message, based on the Plugin and Divi module's configuration.
 * 
 * @since 	2.5.7
 * 
 * @param 	object 	block 			Block.
 * @param 	string  value   		Selected value.
 * @param 	string 	valueLabel 		Selected value's label.
 * @param 	string 	resourceName 	Resource name (form,product).
 */
function ConvertKitDiviRenderResourceModule( block, value, valueLabel, resourceName ) {

	// Fetch element if no access token or resources exist.
	const warning = ConvertKitDiviMaybeRenderWarning( block );
	if ( warning !== true ) {
		return warning;
	}

	// Show instructions if no resource selected.
	if ( value.length === 0 || value === 0 ) {
		// Return module with text.
		return React.createElement( 'div', {
			className: 'convertkit-divi-module'
		}, 'Configure this module by clicking the settings cog.' );
	}

	// Return module with text.
	return React.createElement( 'div', {
		className: 'convertkit-divi-module'
	}, 'ConvertKit ' + resourceName + ' "' + valueLabel + '" selected. View on the frontend site to see the ' + resourceName + '.' ); 

}

/**
 * Returns the Divi module for the given ConvertKit block (form, product, broadcast etc).
 * if there is no access token or resources.
 * 
 * @since 	2.5.7
 * 
 * @param 	object 	block 			Block.
 * @param 	string  value   		Selected value.
 * @param 	string 	valueLabel 		Selected value's label.
 * @param 	string 	resourceName 	Resource name (form,product).
 */
function ConvertKitDiviMaybeRenderWarning( block ) {

	// If no Access Token has been defined in the Plugin, show a message in the module to tell the user what to do.
	if ( ! block.has_access_token ) {
		return React.createElement( 'div', {
			className: 'convertkit-divi-module convertkit-no-content'
		}, [
			React.createElement( 'p', {}, block.no_access_token.notice ),
			React.createElement( 'p', {}, block.no_access_token.instruction_text )
		]  );
	}

	// If no resources exist in ConvertKit, show a message in the module to tell the user what to do.
	if ( ! block.has_resources ) {
		return React.createElement( 'div', {
			className: 'convertkit-divi-module convertkit-no-content'
		}, [
			React.createElement( 'p', {}, block.no_resources.notice ),
			React.createElement( 'p', {}, block.no_resources.instruction_text )
		]  );
	}

	return true;

}

/**
 * Register Divi modules when the Divi Builder API is ready.
 * 
 * @since 	2.5.6
 * 
 * @param 	object 	event 	Event.
 * @param 	object 	API 	Divi Buidler API.
 */
jQuery( window ).on( 'et_builder_api_ready', function ( event, API ) {

	// Register Divi modules.
  	API.registerModules( [
  		ConvertKitDiviBroadcasts,
  		ConvertKitDiviForm,
  		ConvertKitDiviFormTrigger,
  		ConvertKitDiviProduct
  	] );

} );