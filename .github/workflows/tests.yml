name: Run Tests

# When to run tests.
on:
  pull_request:
    types:
      - opened
      - synchronize
  push:
    branches:
      - main

jobs:
  tests:
    # Name.
    name: ${{ matrix.test-groups }} / WordPress ${{ matrix.wp-versions }} / PHP ${{ matrix.php-versions }}

    # Virtual Environment to use.
    # @see: https://github.com/actions/virtual-environments
    runs-on: ubuntu-20.04

    # Environment Variables.
    # Accessible by using ${{ env.NAME }}
    # Use ${{ secrets.NAME }} to include any GitHub Secrets in ${{ env.NAME }}
    # The base folder will always be /home/runner/work/github-repo-name/github-repo-name
    env:
      ROOT_DIR: /home/runner/work/convertkit-wordpress/convertkit-wordpress/wordpress
      PLUGIN_DIR: /home/runner/work/convertkit-wordpress/convertkit-wordpress/wordpress/wp-content/plugins/convertkit
      DB_NAME: test
      DB_USER: root
      DB_PASS: root
      DB_HOST: localhost
      INSTALL_PLUGINS: "convertkit-for-woocommerce convertkit-gravity-forms classic-editor contact-form-7 disable-welcome-messages-and-tips elementor woocommerce wordpress-seo" # Don't include this repository's Plugin here.
      CONVERTKIT_API_KEY: ${{ secrets.CONVERTKIT_API_KEY }} # ConvertKit API Key, stored in the repository's Settings > Secrets
      CONVERTKIT_API_SECRET: ${{ secrets.CONVERTKIT_API_SECRET }} # ConvertKit API Secret, stored in the repository's Settings > Secrets
      CONVERTKIT_API_KEY_NO_DATA: ${{ secrets.CONVERTKIT_API_KEY_NO_DATA }} # ConvertKit API Key for ConvertKit account with no data, stored in the repository's Settings > Secrets
      CONVERTKIT_API_SECRET_NO_DATA: ${{ secrets.CONVERTKIT_API_SECRET_NO_DATA }} # ConvertKit API Secret for ConvertKit account with no data, stored in the repository's Settings > Secrets

    # Defines the WordPress and PHP Versions matrix to run tests on
    # WooCommerce 5.9.0 requires WordPress 5.6 or greater, so we do not test on earlier versions
    # If testing older WordPress versions, ensure they are e.g. 5.7.4, 5.6.6 that have the X3 SSL fix: https://core.trac.wordpress.org/ticket/54207
    # For PHP, make sure that an nginx configuration file exists for the required PHP version in this repository at tests/nginx/php-x.x.conf
    strategy:
      matrix:
        wp-versions: [ '6.1-RC5' ] #[ '5.6.7', '5.7.5', '5.8.3', '5.9' ]
        php-versions: [ '7.4', '8.0' ] #[ '7.3', '7.4', '8.0', '8.1' ]
        
        # Folder names within the 'tests' folder to run tests in parallel.
        test-groups: [
          'acceptance/broadcasts',
          'acceptance/forms',
          'acceptance/general',
          'acceptance/integrations',
          'acceptance/landing-pages',
          'acceptance/products',
          'acceptance/tags'
        ]

    # Steps to install, configure and run tests
    steps:
      - name: Start MySQL
        run: sudo systemctl start mysql.service

      - name: Create MySQL Database
        run: |
          mysql -e 'CREATE DATABASE test;' -u${{ env.DB_USER }} -p${{ env.DB_PASS }}
          mysql -e 'SHOW DATABASES;' -u${{ env.DB_USER }} -p${{ env.DB_PASS }}

      # WordPress won't be able to connect to the DB if we don't perform this step.
      - name: Permit MySQL Password Auth for MySQL 8.0
        run: mysql -e "ALTER USER '${{ env.DB_USER }}'@'${{ env.DB_HOST }}' IDENTIFIED WITH mysql_native_password BY '${{ env.DB_PASS }}';"  -u${{ env.DB_USER }} -p${{ env.DB_PASS }} 

      # Some workflows checkout WordPress from GitHub, but that seems to bring a bunch of uncompiled files with it.
      # Instead download from wordpress.org stable.
      - name: Download WordPress
        run: wget https://wordpress.org/wordpress-${{ matrix.wp-versions }}.tar.gz

      - name: Extract WordPress
        run: tar xfz wordpress-${{ matrix.wp-versions }}.tar.gz

      # Checkout (copy) this repository's Plugin to this VM.
      - name: Checkout Plugin
        uses: actions/checkout@v3
        with:
          path: ${{ env.PLUGIN_DIR }}

      # This step is deliberate, to force PHP 7.4 for WP-CLI to work.
      # PHP 8.x results in the workflow failing due to incompatibilities between WP-CLI and PHP 8.x.
      - name: Install PHP 7.4.26
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4.26
          coverage: xdebug

      # We install WP-CLI, as it provides useful commands to setup and install WordPress through the command line.
      - name: Install WP-CLI
        run: |
          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          chmod +x wp-cli.phar
          sudo mv wp-cli.phar /usr/local/bin/wp-cli

      - name: Setup wp-config.php
        working-directory: ${{ env.ROOT_DIR }}
        run: wp-cli config create --dbname=${{ env.DB_NAME }} --dbuser=${{ env.DB_USER }} --dbpass=${{ env.DB_PASS }} --dbhost=${{ env.DB_HOST }} --locale=en_DB

      - name: Install WordPress
        working-directory: ${{ env.ROOT_DIR }}
        run: wp-cli core install --url=127.0.0.1 --title=ConvertKit --admin_user=admin --admin_password=password --admin_email=wordpress@convertkit.local

      # env.INSTALL_PLUGINS is a list of Plugin slugs, space separated e.g. contact-form-7 woocommerce.
      - name: Install Free Third Party WordPress Plugins
        working-directory: ${{ env.ROOT_DIR }}
        run: wp-cli plugin install ${{ env.INSTALL_PLUGINS }}

      # These should be stored as a separated list of URLs in the repository Settings > Secrets > Repository Secret > CONVERTKIT_PAID_PLUGIN_URLS.
      # We cannot include the URLs in this file, as they're not Plugins we are permitted to distribute.
      - name: Install Paid Third Party WordPress Plugins
        working-directory: ${{ env.ROOT_DIR }}
        run: wp-cli plugin install ${{ secrets.CONVERTKIT_PAID_PLUGIN_URLS }}
      
      # WP_DEBUG = true is required so any WordPress / PHP errors are output and caught by tests.
      # FS_METHOD = direct is required for WP_Filesystem to operate without suppressed PHP fopen() errors that trip up tests.
      - name: Enable WP_DEBUG
        working-directory: ${{ env.ROOT_DIR }}
        run: |
          wp-cli config set WP_DEBUG true --raw
          wp-cli config set FS_METHOD direct

      # This step is deliberately after WordPress installation and configuration, as enabling PHP 8.x before using WP-CLI results
      # in the workflow failing due to incompatibilities between WP-CLI and PHP 8.x.
      # By installing PHP at this stage, we can still run our tests against e.g. PHP 8.x.
      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          coverage: xdebug

      # Make sure that an nginx configuration file exists in this repository at tests/nginx/php-x.x.conf.
      # Refer to an existing .conf file in this repository if you need to create a new one e.g. for a new PHP version.
      - name: Copy nginx configuration file
        run: sudo cp ${{ env.PLUGIN_DIR }}/tests/nginx/php-${{ matrix.php-versions }}.conf /etc/nginx/conf.d/php-${{ matrix.php-versions }}.conf

      - name: Test nginx
        run: sudo nginx -t

      - name: Start nginx
        run: sudo systemctl start nginx.service
        
      - name: Install chromedriver
        uses: nanasess/setup-chromedriver@master

      - name: Start chromedriver
        run: |
          export DISPLAY=:99
          chromedriver --url-base=/wd/hub &
          sudo Xvfb -ac :99 -screen 0 1920x1080x24 > /dev/null 2>&1 & # optional

      # Write any secrets, such as API keys, to the .env.dist.testing file now.
      # Make sure your committed .env.dist.testing file ends with a newline.
      # The formatting of the contents to include a blank newline is deliberate.
      - name: Define GitHub Secrets in .env.dist.testing
        uses: DamianReeves/write-file-action@v1.1
        with:
          path: ${{ env.PLUGIN_DIR }}/.env.dist.testing
          contents: |

            CONVERTKIT_API_KEY=${{ env.CONVERTKIT_API_KEY }}
            CONVERTKIT_API_SECRET=${{ env.CONVERTKIT_API_SECRET }}
            CONVERTKIT_API_KEY_NO_DATA=${{ env.CONVERTKIT_API_KEY_NO_DATA }}
            CONVERTKIT_API_SECRET_NO_DATA=${{ env.CONVERTKIT_API_SECRET_NO_DATA }}
          write-mode: append

      # Installs wp-browser, Codeception, PHP CodeSniffer and anything else needed to run tests.
      - name: Run Composer
        working-directory: ${{ env.PLUGIN_DIR }}
        run: composer update

      - name: Build PHP Autoloader
        working-directory: ${{ env.PLUGIN_DIR }}
        run: composer dump-autoload

      # This ensures the wp-content/uploads folder can be written to by WordPress and third party Plugins.
      - name: Set Permissions for Uploads Directory
        run: |
          sudo chmod g+w ${{ env.ROOT_DIR }}/wp-content/uploads
          sudo chown www-data:www-data ${{ env.ROOT_DIR }}/wp-content/uploads

      # This ensures the Plugin's log file can be written to.
      # We don't recursively do this, as it'll prevent Codeception from writing to the /tests/_output directory.
      - name: Set Permissions for Plugin Directory
        run: |
          sudo chmod g+w ${{ env.PLUGIN_DIR }}
          sudo chown www-data:www-data ${{ env.PLUGIN_DIR }}

      # Build Codeception Tests.
      - name: Build Tests
        working-directory: ${{ env.PLUGIN_DIR }}
        run: php vendor/bin/codecept build

      # Run Codeception WPUnit Tests on the PHP 7.2 instance before the acceptance/broadcasts acceptance tests.
      # We run these once to avoid hitting API rate limits.
      - name: Run tests/wpunit
        if: ${{ matrix.php-versions == '7.2' && matrix.test-groups == 'acceptance/broadcasts' }}
        working-directory: ${{ env.PLUGIN_DIR }}
        run: php vendor/bin/codecept run tests/wpunit --fail-fast

      # Run Codeception Acceptance Tests.
      - name: Run tests/${{ matrix.test-groups }}
        working-directory: ${{ env.PLUGIN_DIR }}
        run: php vendor/bin/codecept run tests/${{ matrix.test-groups }} --fail-fast

      # Artifacts are data generated by this workflow that we want to access, such as log files, screenshots, HTML output.
      # The if: always() directive means that this will run when the workflow fails e.g. if a test fails, which is needed
      # because we want to see why a test failed.
      - name: Upload Test Results to Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ${{ env.PLUGIN_DIR }}/tests/_output/

      - name: Upload Plugin Log File to Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: log.txt
          path: ${{ env.PLUGIN_DIR }}/log.txt