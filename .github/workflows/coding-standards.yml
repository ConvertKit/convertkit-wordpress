name: Coding Standards

# When to run tests.
on:
  pull_request:
    types:
      - opened
      - synchronize
  push:
    branches:
      - master

jobs:
  tests:
    # Name.
    name: Coding Standards / WordPress ${{ matrix.wp-versions }} / PHP ${{ matrix.php-versions }}

    # Virtual Environment to use.
    # @see: https://github.com/actions/virtual-environments
    runs-on: ubuntu-20.04

    # Environment Variables.
    # Accessible by using ${{ env.NAME }}
    # Use ${{ secrets.NAME }} to include any GitHub Secrets in ${{ env.NAME }}
    # The base folder will always be /home/runner/work/github-repo-name/github-repo-name
    env:
      ROOT_DIR: /home/runner/work/convertkit-wordpress/convertkit-wordpress/wordpress
      PLUGIN_DIR: /home/runner/work/convertkit-wordpress/convertkit-wordpress/wordpress/wp-content/plugins/convertkit
      DB_NAME: test
      DB_USER: root
      DB_PASS: root
      DB_HOST: localhost
      INSTALL_PLUGINS: "classic-editor contact-form-7 disable-welcome-messages-and-tips elementor woocommerce wordpress-seo" # Don't include this repository's Plugin here.
      ACTIVATE_PLUGINS: "disable-welcome-messages-and-tips wordpress-seo" # Installed Plugins that should be activated prior to any tests

    # Defines the WordPress and PHP Versions matrix to run tests on.
    strategy:
      matrix:
        wp-versions: [ '6.0' ] #[ '5.6.7', '5.7.5', '5.8.3', '5.9' ]
        php-versions: [ '7.4' ] #[ '7.3', '7.4', '8.0', '8.1' ]

    # Steps to install, configure and run tests
    steps:
      - name: Start MySQL
        run: sudo systemctl start mysql.service

      - name: Create MySQL Database
        run: |
          mysql -e 'CREATE DATABASE test;' -u${{ env.DB_USER }} -p${{ env.DB_PASS }}
          mysql -e 'SHOW DATABASES;' -u${{ env.DB_USER }} -p${{ env.DB_PASS }}

      # WordPress won't be able to connect to the DB if we don't perform this step.
      - name: Permit MySQL Password Auth for MySQL 8.0
        run: mysql -e "ALTER USER '${{ env.DB_USER }}'@'${{ env.DB_HOST }}' IDENTIFIED WITH mysql_native_password BY '${{ env.DB_PASS }}';"  -u${{ env.DB_USER }} -p${{ env.DB_PASS }} 

      # Some workflows checkout WordPress from GitHub, but that seems to bring a bunch of uncompiled files with it.
      # Instead download from wordpress.org stable.
      - name: Download WordPress
        run: wget https://wordpress.org/wordpress-${{ matrix.wp-versions }}.tar.gz

      - name: Extract WordPress
        run: tar xfz wordpress-${{ matrix.wp-versions }}.tar.gz

      # Checkout (copy) this repository's Plugin to this VM.
      - name: Checkout Plugin
        uses: actions/checkout@v2
        with:
          path: ${{ env.PLUGIN_DIR }}

      # This step is deliberate, to force PHP 7.4 for WP-CLI to work.
      # PHP 8.x results in the workflow failing due to incompatibilities between WP-CLI and PHP 8.x.
      - name: Install PHP 7.4.26
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4.26
          coverage: xdebug

      # We install WP-CLI, as it provides useful commands to setup and install WordPress through the command line.
      - name: Install WP-CLI
        run: |
          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          chmod +x wp-cli.phar
          sudo mv wp-cli.phar /usr/local/bin/wp-cli

      - name: Setup wp-config.php
        working-directory: ${{ env.ROOT_DIR }}
        run: wp-cli config create --dbname=${{ env.DB_NAME }} --dbuser=${{ env.DB_USER }} --dbpass=${{ env.DB_PASS }} --dbhost=${{ env.DB_HOST }} --locale=en_DB

      - name: Install WordPress
        working-directory: ${{ env.ROOT_DIR }}
        run: wp-cli core install --url=127.0.0.1 --title=ConvertKit --admin_user=admin --admin_password=password --admin_email=wordpress@convertkit.local

      # env.INSTALL_PLUGINS is a list of Plugin slugs, space separated e.g. contact-form-7 woocommerce.
      - name: Install Free Third Party WordPress Plugins
        working-directory: ${{ env.ROOT_DIR }}
        run: wp-cli plugin install ${{ env.INSTALL_PLUGINS }}

      # env.ACTIVATE_PLUGINS is a list of Plugin slugs, space separated e.g. contact-form-7 woocommerce.
      - name: Activate Free Third Party WordPress Plugins
        working-directory: ${{ env.ROOT_DIR }}
        run: wp-cli plugin activate ${{ env.ACTIVATE_PLUGINS }}

      # These should be stored as a separated list of URLs in the repository Settings > Secrets > Repository Secret > CONVERTKIT_PAID_PLUGIN_URLS.
      # We cannot include the URLs in this file, as they're not Plugins we are permitted to distribute.
      - name: Install and Activate Paid Third Party WordPress Plugins
        working-directory: ${{ env.ROOT_DIR }}
        run: wp-cli plugin install ${{ secrets.CONVERTKIT_PAID_PLUGIN_URLS }} --activate

      # Install PHP version to run tests against.
      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          coverage: xdebug

      # Make sure that an nginx configuration file exists in this repository at tests/nginx/php-x.x.conf.
      # Refer to an existing .conf file in this repository if you need to create a new one e.g. for a new PHP version.
      - name: Copy nginx configuration file
        run: sudo cp ${{ env.PLUGIN_DIR }}/tests/nginx/php-${{ matrix.php-versions }}.conf /etc/nginx/conf.d/php-${{ matrix.php-versions }}.conf

      - name: Test nginx
        run: sudo nginx -t

      - name: Start nginx
        run: sudo systemctl start nginx.service

      # Installs wp-browser, Codeception, PHP CodeSniffer and anything else needed to run tests.
      - name: Run Composer
        working-directory: ${{ env.PLUGIN_DIR }}
        run: composer update

      - name: Build PHP Autoloader
        working-directory: ${{ env.PLUGIN_DIR }}
        run: composer dump-autoload

      # Run WordPress Coding Standards tests.
      - name: Run WordPress Coding Standards Tests
        working-directory: ${{ env.PLUGIN_DIR }}
        run: php vendor/bin/phpcs ./ -v

      # Run PHPStan for static analysis.
      - name: Run PHPStan Static Analysis
        working-directory: ${{ env.PLUGIN_DIR }}
        run: php vendor/bin/phpstan --memory-limit=1024M